The second loop of the program is :
            int y = 2098234;
                    for(int i=0;i<35;i++){
                        System.out.printf("%d\t\t%32s\n",i,Integer.toBinaryString(y));
                        y = y >>> i;
                    }
This loop produces the output :

            0		          1000000000010000111010
            1		          1000000000010000111010
            2		           100000000001000011101
            3		             1000000000010000111
            4		                1000000000010000
            5		                    100000000001
            6		                         1000000
            7		                               1
            8		                               0
            9		                               0
            10		                               0
            11		                               0
            12		                               0
            13		                               0
            14		                               0
            15		                               0
            16		                               0
            17		                               0
            18		                               0
            19		                               0
            20		                               0
            21		                               0
            22		                               0
            23		                               0
            24		                               0
            25		                               0
            26		                               0
            27		                               0
            28		                               0
            29		                               0
            30		                               0
            31		                               0
            32		                               0
            33		                               0
            34		                               0

This happens because through every loop you assign the value y >>> i  to y. This causes y to have a different value
through each iteration of the loop, and eventually have the value of 0. Once that happens you keep shifting the bits of
0 which stays as 0.

The result of the first loop is :
0		          1000000000010000111010
1		           100000000001000011101
2		            10000000000100001110
3		             1000000000010000111
4		              100000000001000011
5		               10000000000100001
6		                1000000000010000
7		                 100000000001000
8		                  10000000000100
9		                   1000000000010
10		                    100000000001
11		                     10000000000
12		                      1000000000
13		                       100000000
14		                        10000000
15		                         1000000
16		                          100000
17		                           10000
18		                            1000
19		                             100
20		                              10
21		                               1
22		                               0
23		                               0
24		                               0
25		                               0
26		                               0
27		                               0
28		                               0
29		                               0
30		                               0
31		                               0
32		          1000000000010000111010
33		           100000000001000011101
34		            10000000000100001110

As for the results of the first loop oracle's java manual says that when shifting an int uses only
the last five ordered bits making the range of shifts that can be done are 0 to 31 inclusive. This can be found in
section 15.19 in the following link:

http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.19